{"version":3,"sources":["logic/websocket/GlobalContext.js","logic/websocket/SocketCustomEvents.js","components/welcome-page/WelcomePage.js","utils/formatTimestamp.js","components/chat-page/MessageBox.js","logic/websocket/structs/Message.js","logic/websocket/structs/IncomingMessage.js","components/chat-page/MessageWindow.js","components/chat-page/MessageBoxInput.js","components/chat-page/LiveUserWindow.js","components/chat-page/ChatPage.js","config.js","components/App.js","index.js"],"names":["GlobalContext","createContext","SocketCustomEvents","server","onSuccessEnter","onUpdateRoomUsers","onUserMessage","onServerMessage","client","onUserSendName","onUserSendMessage","memo","useState","name","setName","location","useLocation","socket","useContext","Paper","className","Typography","variant","color","component","TextField","id","label","value","onChange","event","target","Button","disabled","onClick","emit","room","pathname","slice","formatTimestamp","timestamp","Date","toLocaleTimeString","message","isOwn","Card","cx","key","sender","CardHeader","title","subheader","CardContent","text","Message","this","IncomingMessage","messages","setMessages","addNewMessage","console","log","incomingMessage","on","map","setText","placeholder","users","setUsers","noWrap","List","index","ListItem","ListItemText","primary","Grid","container","spacing","item","xs","Config","uri","App","isJoined","setIsJoined","setSocket","history","useHistory","useEffect","alert","newSocket","Socket","connect","push","disconnect","Provider","StylesProvider","injectFirst","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eed8afa2.chunk.js","sourcesContent":["import {createContext} from 'react';\n\nexport const GlobalContext = createContext();\n","/**\n * The list of custom socket events\n */\nconst SocketCustomEvents = {\n  /**\n     * Socket events created by server. Clients can subscribe to them.\n     * @example\n     * socket.on(event,args)\n     */\n  server: {\n    /**\n         *\n         */\n    onSuccessEnter: 'successEnter',\n    /**\n         *\n         */\n    onUpdateRoomUsers: 'liveRoomUsers',\n    /**\n         *\n         */\n    onUserMessage: 'broadcastChatMessage',\n    /**\n         *\n         */\n    onServerMessage: 'serverMessage',\n  },\n  /**\n     * Socket events created by users. Users can create this events.\n     * @example\n     * socket.emit(event,args)\n     */\n  client: {\n    /**\n         *\n         */\n    onUserSendName: 'sendName',\n    /**\n         *\n         */\n    onUserSendMessage: 'sendChatMessage',\n  },\n};\n\nexport default SocketCustomEvents;\n","import React, {memo, useContext, useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport './WelcomePage.css';\nimport {GlobalContext} from '../../logic/websocket/GlobalContext';\nimport {useLocation} from 'react-router-dom';\nimport SocketCustomEvents from '../../logic/websocket/SocketCustomEvents';\n\nconst WelcomePage = () => {\n  const [name, setName] = useState('');\n  const location = useLocation();\n  const socket = useContext(GlobalContext);\n  const handleChange = (event) => {\n    setName(event.target.value);\n  };\n  const handleClick = () => {\n    socket.emit(SocketCustomEvents.client.onUserSendName, {\n      name: name,\n      room: location.pathname.slice(1),\n    });\n  };\n\n  return (\n    <Paper className=\"WelcomePage_paper\">\n      <Typography variant=\"subtitle1\" color=\"primary\" component=\"h1\">\n        My chat server\n      </Typography>\n      <TextField\n        id=\"username\"\n        label={name ? 'Name' : 'Enter your name'}\n        value={name}\n        onChange={handleChange}\n        className=\"WelcomePage_field\"\n      />\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        disabled={!name}\n        onClick={handleClick}\n      >\n        Join chat\n      </Button>\n    </Paper>\n  );\n};\n\nexport default memo(WelcomePage);\n","const formatTimestamp = (timestamp) => {\n  return new Date(timestamp).toLocaleTimeString('en-US');\n};\n\nexport default formatTimestamp;\n","import React, { memo } from 'react'\nimport { CardHeader } from '@material-ui/core'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport formatTimestamp from '../../utils/formatTimestamp'\nimport cx from 'classnames'\nimport './MessageBox.css'\n// import {IncomingMessage} from '../../logic/websocket/structs/IncomingMessage';\n\n/**\n * asdasd\n * @param message\n * @type IncomingMessage\n * @param isOwn\n * @type boolean\n * @return {JSX.Element}\n * @constructor\n */\nconst MessageBox = ({ message, isOwn }) => (\n    <Card\n        className={cx(\n            'MessageBox',\n            `MessageBox__owner-${isOwn ? 'me' : 'other'}`\n        )}\n        key={message.timestamp + message.sender}\n        variant=\"outlined\"\n    >\n        <CardHeader\n            title={\n                <Typography variant=\"subtitle1\" color=\"primary\">\n                    {message.sender}\n                </Typography>\n            }\n            subheader={\n                <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    {formatTimestamp(message.timestamp)}\n                </Typography>\n            }\n        />\n        <CardContent>\n            <Typography>{message.text}</Typography>\n        </CardContent>\n    </Card>\n)\n\nexport default memo(MessageBox)\n","class Message {\n  /**\n   * @constructor\n   * @param text {string}\n   */\n  constructor(text) {\n    this.text = text;\n  }\n}\n\nexport default Message;\n","import Message from './Message';\n\n/**\n *\n * @extends Message\n * @param timestamp {number}\n * @param sender {string}\n * @param text {string}\n * @param id {string}\n */\nclass IncomingMessage extends Message {\n  constructor(timestamp, sender, text, id) {\n    super(text);\n    this.timestamp = timestamp;\n    this.sender = sender;\n    this.id = id;\n  }\n}\n\nexport default IncomingMessage;\n","import React, {memo, useContext, useState} from 'react';\nimport './MessageWindow.css';\nimport Paper from '@material-ui/core/Paper';\nimport MessageBox from './MessageBox';\nimport {GlobalContext} from '../../logic/websocket/GlobalContext';\nimport SocketCustomEvents from '../../logic/websocket/SocketCustomEvents';\nimport IncomingMessage from '../../logic/websocket/structs/IncomingMessage';\n\nconst MessageWindow = () => {\n  const [messages, setMessages] = useState([]);\n  const socket = useContext(GlobalContext);\n\n  socket.on(SocketCustomEvents.server.onUserMessage, addNewMessage);\n  socket.on(SocketCustomEvents.server.onServerMessage, addNewMessage);\n\n  function addNewMessage(message) {\n    console.log(message);\n    const incomingMessage = new IncomingMessage(\n        message.timestamp,\n        message.sender,\n        message.text,\n        message.id,\n    );\n    setMessages([...messages, incomingMessage]);\n  }\n\n  return (\n    <Paper className=\"MessageWindow\">\n      {messages.map((message) => (\n        <MessageBox\n          key={message.timestamp}\n          message={message}\n          isOwn={message.id === socket.id}\n        />\n      ))}\n    </Paper>\n  );\n};\n\nexport default memo(MessageWindow);\n","import React, {memo, useContext, useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport {Button} from '@material-ui/core';\nimport './MessageBoxInput.css';\nimport {GlobalContext} from '../../logic/websocket/GlobalContext';\nimport SocketCustomEvents from '../../logic/websocket/SocketCustomEvents';\nimport Message from '../../logic/websocket/structs/Message';\n\nconst MessageBoxInput = () => {\n  const [text, setText] = useState('');\n  const handleChange = (event) => {\n    setText(event.target.value);\n  };\n  const socket = useContext(GlobalContext);\n  const handleClick = () => {\n    if (socket) {\n      socket.emit(\n          SocketCustomEvents.client.onUserSendMessage,\n          new Message(text),\n      );\n      setText('');\n    }\n  };\n\n  return (\n    <Paper className=\"MessageBoxInput\">\n      <TextField\n        placeholder=\"Enter your message\"\n        value={text}\n        onChange={handleChange}\n        className=\"MessageBoxInput_field\"\n      />\n      <Button\n        onClick={handleClick}\n        variant=\"outlined\"\n        color=\"primary\"\n        disabled={!text}\n      >\n        Send\n      </Button>\n    </Paper>\n  );\n};\n\nexport default memo(MessageBoxInput);\n","import React, {memo, useContext, useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport './LiveUserWindow.css';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {GlobalContext} from '../../logic/websocket/GlobalContext';\nimport SocketCustomEvents from '../../logic/websocket/SocketCustomEvents';\n\nconst LiveUserWindow = () => {\n  const [users, setUsers] = useState([]);\n  const socket = useContext(GlobalContext);\n  socket.on(SocketCustomEvents.server.onUpdateRoomUsers, (users) => {\n    console.log(users);\n    if (users) {\n      setUsers(users);\n    }\n  });\n\n  return (\n    <Paper className=\"LiveUserWindow\">\n      <Typography\n        className=\"LiveUserWindow-header\"\n        variant=\"subtitle1\"\n        color=\"secondary\"\n        noWrap\n      >\n        Live users\n      </Typography>\n      <List>\n        {users.map((value, index) => (\n          <ListItem key={value}>\n            <ListItemText primary={`${index + 1}. ${value}`} />\n          </ListItem>\n        ))}\n      </List>\n    </Paper>\n  );\n};\n\nexport default memo(LiveUserWindow);\n","import React, {memo} from 'react';\nimport './ChatPage.css';\nimport MessageWindow from './MessageWindow';\nimport MessageBoxInput from './MessageBoxInput';\nimport {Grid} from '@material-ui/core';\nimport LiveUserWindow from './LiveUserWindow';\n\nconst ChatPage = () => {\n  return (\n    <Grid container spacing={3}>\n      <Grid className=\"ChatPage-header\" item xs={12} />\n      <Grid item xs={3} />\n      <Grid item xs={6}>\n        <MessageWindow />\n        <MessageBoxInput />\n      </Grid>\n      <Grid item xs={3}>\n        <LiveUserWindow />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default memo(ChatPage);\n","const Config = {\n  socket: {\n    uri: '127.0.0.1:3001',\n  },\n};\n\nexport default Config;\n","import React, {useEffect, useState} from 'react';\nimport cx from 'classnames';\nimport {useHistory} from 'react-router-dom';\nimport Socket from 'socket.io-client';\n\nimport {Container} from '@material-ui/core';\nimport {StylesProvider} from '@material-ui/styles';\n\nimport './App.css';\nimport WelcomePage from './welcome-page/WelcomePage';\nimport ChatPage from './chat-page/ChatPage';\nimport {GlobalContext} from '../logic/websocket/GlobalContext';\nimport Config from '../config';\nimport SocketCustomEvents from '../logic/websocket/SocketCustomEvents';\n\nconst App = () => {\n  const [isJoined, setIsJoined] = useState(false);\n  const [socket, setSocket] = useState(null);\n  const history = useHistory();\n\n  useEffect(() => {\n    alert('App mount');\n    const newSocket = Socket.connect(Config.socket.uri);\n    setSocket(newSocket);\n    newSocket.on(SocketCustomEvents.server.onSuccessEnter, (room) => {\n      history.push(`/${room}`);\n      setIsJoined(true);\n    });\n    return () => {\n      alert('App unmount');\n      socket && socket.disconnect();\n    };\n  }, [history, socket]);\n\n  return (\n    <GlobalContext.Provider value={socket}>\n      <StylesProvider injectFirst>\n        <Container\n          className={cx('App_container', !isJoined && 'App_container__modal')}\n        >\n          {!isJoined ? <WelcomePage /> : <ChatPage />}\n        </Container>\n      </StylesProvider>\n    </GlobalContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}