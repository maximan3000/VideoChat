{"version":3,"sources":["logic/websocket/context/IContext.js","logic/websocket/context/SocketContext.js","logic/websocket/context/useSocketContext.js","logic/websocket/structs/outgoing/RoomConnection.js","logic/hooks/useFormEnterPress.js","components/welcome-page/WelcomePage.js","utils/formatTimestamp.js","components/chat-page/MessageBox.js","components/chat-page/MessagesWindow.js","logic/websocket/structs/outgoing/OutgoingMessage.js","components/chat-page/MessageBoxInput.js","components/chat-page/LiveUserWindow.js","logic/web-rtc/structs/webrtc/IceCandidateContext.js","logic/web-rtc/structs/webrtc/AnswerContext.js","Config.js","logic/web-rtc/WebRtcController.js","components/chat-page/VideoBox.js","components/chat-page/ChatPage.js","components/App.js","logic/websocket/SocketEvents.js","logic/websocket/structs/incoming/Room.js","logic/websocket/structs/incoming/User.js","logic/websocket/SocketController.js","logic/websocket/context/ContextState.js","components/SocketManager.js","index.js"],"names":["IContext","context","this","_context","roomConnection","emits","enterRoom","message","sendMessage","offer","webrtc","sendOffer","answerContext","sendAnswer","iceCandidate","sendIceCandidateOffer","iceCandidateContext","sendIceCandidateAnswer","id","isChatEntered","isConnected","room","users","offerContext","iceCandidateOffer","iceCandidateAnswer","SocketContext","createContext","useSocketContext","useContext","RoomConnection","username","useFormEnterPress","onEnter","useState","isFocus","setIsFocus","event","key","StyledPaper","styled","Paper","StyledTextField","TextField","memo","name","setName","location","useLocation","socketContext","pathname","slice","onPressEnter","Typography","variant","color","component","label","value","onChange","target","className","onKeyPress","focused","autoFocus","Button","disabled","onClick","formatTimestamp","timestamp","Date","toLocaleTimeString","Message","Card","props","ismine","isown","sender","CardHeader","title","subheader","display","noWrap","CardContent","text","Window","Container","div","reducer","state","action","type","ACTION_TYPES","ADD_MESSAGE","useReducer","messages","dispatchMessages","lastMessageRef","useRef","useEffect","current","scrollIntoView","behavior","map","ref","OutgoingMessage","setText","trim","placeholder","setUsers","List","user","index","ListItem","ListItemText","primary","IceCandidateContext","AnswerContext","answer","Config","uri","config","iceServers","urls","WebRtcController","instance","_init","rtc","RTCPeerConnection","remoteStream","MediaStream","localStream","navigator","mediaDevices","getUserMedia","video","audio","sendIceCandidate","setRemoteDescription","RTCSessionDescription","_setIceListener","addEventListener","a","addTrack","track","createAnswer","setLocalDescription","addIceCandidate","console","log","_getLocalStream","getTracks","forEach","createOffer","candidate","Video","videoRef","rtcController","setRtcController","controller","srcObject","onAnswer","onOffer","CardMedia","length","alert","autoPlay","playsinlines","StyledGrid","Grid","container","spacing","item","xs","StyledContainer","StyledContainerModal","App","history","useHistory","push","StylesProvider","injectFirst","SocketEvents","CONNECT","DISCONNECT","SUCCESS_ROOM_ENTER","ROOM_USERS","MESSAGE","ENTER_ROOM","SEND_MESSAGE","ON","ANSWER","OFFER","ICE_CANDIDATE_OFFER","ICE_CANDIDATE_ANSWER","EMIT","SEND_OFFER","SEND_ANSWER","SEND_ICE_CANDIDATE_OFFER","SEND_ICE_CANDIDATE_ANSWER","Room","User","SocketController","_socket","io","callback","on","dir","newUsers","emit","ContextState","ACTION_TYPE","SocketManager","dispatchContext","socket","onConnect","onDisconnect","onChatEnter","onRoomUsers","onMessage","onIceCandidateOffer","onIceCandidateAnswer","Provider","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.483fc20d.chunk.js","sourcesContent":["/**\n * Access interface to websocket context\n */\nexport class IContext {\n  /**\n   * @constructor\n   * @param {ContextState} context Current state of websocket context\n   * @see useSocketContext\n   */\n  constructor(context) {\n    this._context = context;\n  }\n\n  /**\n   * @return {string} Id of current websocket partial\n   */\n  get id() {\n    return this._context.id;\n  }\n\n  /**\n   * @return {boolean} Return true if the client has connected to the chat\n   */\n  get isChatEntered() {\n    return this._context.isChatEntered;\n  }\n\n  /**\n   * @return {boolean} Return true if websocket has connected\n   */\n  get isConnected() {\n    return this._context.isConnected;\n  }\n\n  /**\n   * @return {IncomingMessage} The last message gotten from the websocket\n   */\n  get message() {\n    return this._context.message;\n  }\n\n  /**\n   * @return {Room} The room the client is in\n   */\n  get room() {\n    return this._context.room;\n  }\n\n  /**\n   * @return {User[]} List of all users that are in the same room right now\n   */\n  get users() {\n    return this._context.users;\n  }\n\n  /**\n   * @return {OfferContext} The last offer context gotten from the websocket\n   */\n  get offerContext() {\n    return this._context.webrtc.offerContext;\n  }\n\n  /**\n   * @return {AnswerContext} The last answer context gotten from the websocket\n   */\n  get answerContext() {\n    return this._context.webrtc.answerContext;\n  }\n\n  /**\n   * @return {IceCandidateContext} The last ice candidate context from offer gotten from the websocket\n   */\n  get iceCandidateOffer() {\n    return this._context.webrtc.iceCandidateOffer;\n  }\n\n  /**\n   * @return {IceCandidateContext} The last ice candidate context from answer gotten from the websocket\n   */\n  get iceCandidateAnswer() {\n    return this._context.webrtc.iceCandidateAnswer;\n  }\n\n  /**\n   * @see SocketController.enterRoom\n   * @param {RoomConnection} roomConnection\n   */\n  enterRoom(roomConnection) {\n    this._context.emits.enterRoom(roomConnection);\n  }\n\n  /**\n   * @see SocketController.sendMessage\n   * @param {OutgoingMessage} message\n   */\n  sendMessage(message) {\n    this._context.emits.sendMessage(message);\n  }\n\n  /**\n   * @see SocketController.sendOffer\n   * @param {RTCSessionDescription} offer\n   */\n  sendOffer(offer) {\n    this._context.webrtc.emits.sendOffer(offer);\n  }\n\n  /**\n   * @see SocketController.sendAnswer\n   * @param {AnswerContext} answerContext\n   */\n  sendAnswer(answerContext) {\n    this._context.webrtc.emits.sendAnswer(answerContext);\n  }\n\n  /**\n   * @see SocketController.sendIceCandidateOffer\n   * @param {RTCIceCandidate} iceCandidate\n   */\n  sendIceCandidateOffer(iceCandidate) {\n    this._context.webrtc.emits.sendIceCandidateOffer(iceCandidate);\n  }\n\n  /**\n   * @see SocketController.sendIceCandidateAnswer\n   * @param {IceCandidateContext} iceCandidateContext\n   */\n  sendIceCandidateAnswer(iceCandidateContext) {\n    this._context.webrtc.emits.sendIceCandidateAnswer(iceCandidateContext);\n  }\n}\n","import {createContext} from 'react';\n\nexport const SocketContext = createContext();\n","import {useContext} from 'react';\nimport {IContext} from './IContext';\nimport {SocketContext} from './SocketContext';\n\nexport const useSocketContext = () => {\n  const context = useContext(SocketContext);\n  return new IContext(context);\n};\n","/**\n * Arguments needed to connect to room\n */\nexport class RoomConnection {\n  /**\n   * @constructor\n   * @param {string} username Name of user\n   * @param {string} room Name of room\n   */\n  constructor(username, room) {\n    this.username = username;\n    this.room = room;\n  }\n}\n","import {useState} from 'react';\n\n/**\n * Do anything when <Enter> pressed\n * @callback onEnter\n */\n\n/**\n * @callback onEnterPress\n * @param {Event} event\n */\n\n/**\n * @param {onEnter} onEnter Callback when <Enter> pressed\n * @return {(onEnterPress|boolean)[]}\n * Array of 2 elements:\n * 1. Wrapped function, occures when event.key is <Enter>\n * 2. State isFocus that set true inside wrapped function\n * @example\n * const sendText = () => {...sending text...}\n * const [onPressEnter, isFocus] = useFormEnterPress(sendText);\n * ...\n * <TextField onKeyPress={onPressEnter} focused={isFocus}/>\n */\nexport const useFormEnterPress = (onEnter) => {\n  const [isFocus, setIsFocus] = useState(true);\n  const onEnterPress = (event) => {\n    if (event.key === 'Enter') {\n      onEnter();\n      setIsFocus(true);\n    }\n  };\n  return [onEnterPress, isFocus];\n};\n","import React, {memo, useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport {useSocketContext} from '../../logic/websocket/context/useSocketContext';\nimport {useLocation} from 'react-router-dom';\nimport {RoomConnection} from '../../logic/websocket/structs/outgoing/RoomConnection';\nimport {useFormEnterPress} from '../../logic/hooks/useFormEnterPress';\nimport styled from 'styled-components';\n\nconst StyledPaper = styled(Paper)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  padding: 20px;\n`;\nconst StyledTextField = styled(TextField)`\n  margin: 10px 0;\n`;\n\n/**\n * Form with name of user\n * @return {JSX.Element}\n * @constructor\n */\nconst WelcomePage = () => {\n  const [name, setName] = useState('');\n  const location = useLocation();\n  const socketContext = useSocketContext();\n\n  const handleChange = (event) => {\n    setName(event.target.value);\n  };\n\n  const enterRoom = () => {\n    if (socketContext.isConnected) {\n      socketContext.enterRoom(\n        new RoomConnection(name, location.pathname.slice(1))\n      );\n    }\n  };\n\n  const [onPressEnter, isFocus] = useFormEnterPress(enterRoom);\n\n  return (\n    <StyledPaper>\n      <Typography variant=\"subtitle1\" color=\"primary\" component=\"h1\">\n        My chat server\n      </Typography>\n      <StyledTextField\n        id=\"username\"\n        label={name ? 'Name' : 'Enter your name'}\n        value={name}\n        onChange={handleChange}\n        className=\"WelcomePage_field\"\n        onKeyPress={onPressEnter}\n        focused={isFocus}\n        autoFocus={true}\n      />\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        disabled={!name}\n        onClick={enterRoom}\n      >\n        Join chat\n      </Button>\n    </StyledPaper>\n  );\n};\n\nexport default memo(WelcomePage);\n","/**\n * Converts timestamp to string of format like \"5:05:14 PM\"\n * @param {number} timestamp\n * @return {string} Formatted time\n */\nconst formatTimestamp = (timestamp) => {\n  return new Date(timestamp).toLocaleTimeString('en-US');\n};\n\nexport default formatTimestamp;\n","import React, {memo} from 'react';\nimport {CardHeader} from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport formatTimestamp from '../../utils/formatTimestamp';\nimport styled from 'styled-components';\n\nconst Message = styled(Card)`\n  display: inline-block;\n  align-self: ${(props) => (props.ismine ? 'flex-end' : 'flex-start')};\n  margin-bottom: 10px;\n  max-width: 70%;\n`;\n\n/**\n * Block with message content\n * @param {IncomingMessage} message\n * @param {boolean} isown\n * @return {JSX.Element}\n * @constructor\n */\nconst MessageBox = ({message, isown}) => (\n  <Message\n    key={message.timestamp + message.sender}\n    variant=\"outlined\"\n    ismine={isown ? 1 : 0}\n  >\n    <CardHeader\n      title={\n        <Typography variant=\"subtitle1\" color=\"primary\">\n          {message.sender}\n        </Typography>\n      }\n      subheader={\n        <Typography\n          variant=\"subtitle2\"\n          color=\"textSecondary\"\n          display=\"block\"\n          noWrap={false}\n        >\n          {formatTimestamp(message.timestamp)}\n        </Typography>\n      }\n    />\n    <CardContent>\n      <Typography>{message.text}</Typography>\n    </CardContent>\n  </Message>\n);\n\nexport default memo(MessageBox);\n","import React, {memo, useEffect, useReducer, useRef} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport MessageBox from './MessageBox';\nimport {useSocketContext} from '../../logic/websocket/context/useSocketContext';\nimport styled from 'styled-components';\n\nconst Window = styled(Paper)`\n  height: 400px;\n  overflow: auto;\n  margin-bottom: 20px;\n`;\n\nconst Container = styled.div`\n  padding: 10px 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  min-height: 90%;\n`;\n\n// eslint-disable-next-line require-jsdoc\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTION_TYPES.ADD_MESSAGE:\n      if (!action.message) return state;\n      return [...state, action.message];\n    default:\n      return state;\n  }\n}\nconst ACTION_TYPES = {\n  ADD_MESSAGE: 0,\n};\n\n/**\n * Window with all messages\n * @return {JSX.Element}\n * @constructor\n */\nconst MessagesWindow = () => {\n  const [messages, dispatchMessages] = useReducer(reducer, []);\n  const socketContext = useSocketContext();\n  const lastMessageRef = useRef(null);\n\n  const scrollToBottom = () => {\n    lastMessageRef.current.scrollIntoView({behavior: 'smooth'});\n  };\n\n  useEffect(() => {\n    dispatchMessages({\n      type: ACTION_TYPES.ADD_MESSAGE,\n      message: socketContext.message,\n    });\n  }, [socketContext.message]);\n\n  useEffect(scrollToBottom, [messages]);\n\n  return (\n    <Window>\n      <Container>\n        {messages.map((message) => (\n          <MessageBox\n            key={message.timestamp}\n            message={message}\n            isown={message.id === socketContext.id}\n          />\n        ))}\n        <div ref={lastMessageRef} />\n      </Container>\n    </Window>\n  );\n};\n\nexport default memo(MessagesWindow);\n","/**\n * Message sended to the websocket from client\n */\nexport class OutgoingMessage {\n  /**\n   * @constructor\n   * @param {string} text Text of the message\n   */\n  constructor(text) {\n    this.text = text;\n  }\n}\n","import React, {memo, useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport {Button} from '@material-ui/core';\nimport {OutgoingMessage} from '../../logic/websocket/structs/outgoing/OutgoingMessage';\nimport {useSocketContext} from '../../logic/websocket/context/useSocketContext';\nimport {useFormEnterPress} from '../../logic/hooks/useFormEnterPress';\nimport styled from 'styled-components';\n\nconst StyledPaper = styled(Paper)`\n  padding: 10px 20px;\n  display: flex;\n`;\n\nconst StyledTextField = styled(TextField)`\n  margin-right: 10px;\n  flex: 1;\n`;\n\n/**\n * Form with new message input\n * @return {JSX.Element}\n * @constructor\n */\nconst MessageBoxInput = () => {\n  const [text, setText] = useState('');\n  const socketContext = useSocketContext();\n\n  const handleChange = (event) => {\n    setText(event.target.value);\n  };\n  const sendMessage = () => {\n    if (text.trim() !== '') {\n      socketContext.sendMessage(new OutgoingMessage(text));\n      setText('');\n    }\n  };\n\n  const [onPressEnter, isFocus] = useFormEnterPress(sendMessage);\n\n  return (\n    <StyledPaper>\n      <StyledTextField\n        placeholder=\"Enter your message\"\n        value={text}\n        onChange={handleChange}\n        onKeyPress={onPressEnter}\n        className=\"MessageBoxInput_field\"\n        focused={isFocus}\n        autoFocus={true}\n      />\n      <Button\n        onClick={sendMessage}\n        variant=\"outlined\"\n        color=\"primary\"\n        disabled={!text}\n      >\n        Send\n      </Button>\n    </StyledPaper>\n  );\n};\n\nexport default memo(MessageBoxInput);\n","import React, {memo, useEffect, useState} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport {useSocketContext} from '../../logic/websocket/context/useSocketContext';\nimport styled from 'styled-components';\n\nconst StyledPaper = styled(Paper)`\n  padding: 10px 20px;\n  margin-bottom: 20px;\n`;\n\n/**\n * Window with list of all room users\n * @return {JSX.Element}\n * @constructor\n */\nconst LiveUserWindow = () => {\n  const [users, setUsers] = useState([]);\n  const socketContext = useSocketContext();\n\n  useEffect(() => {\n    if (socketContext.users) {\n      setUsers(socketContext.users);\n    }\n  }, [socketContext.users, users]);\n\n  return (\n    <StyledPaper>\n      <Typography variant=\"subtitle1\" color=\"secondary\" noWrap>\n        Live users\n      </Typography>\n      <List>\n        {users.map((user, index) => (\n          <ListItem key={user.name}>\n            <ListItemText primary={`${index + 1}. ${user.name}`} />\n          </ListItem>\n        ))}\n      </List>\n    </StyledPaper>\n  );\n};\n\nexport default memo(LiveUserWindow);\n","/**\n * WebRtc ICE candidate info\n */\nexport class IceCandidateContext {\n  /**\n   * @param {RTCIceCandidate} iceCandidate WebRtc ICE candidate\n   * @param {string} id Socket connection ID of the offer\n   */\n  constructor(iceCandidate, id) {\n    this.iceCandidate = iceCandidate;\n    this.id = id;\n  }\n}\n","/**\n * WebRtc answer info\n */\nexport class AnswerContext {\n  /**\n   * @param {RTCSessionDescription} answer WebRtc SDP answer\n   * @param {string} id Socket connection ID of the offer\n   */\n  constructor(answer, id) {\n    this.answer = answer;\n    this.id = id;\n  }\n}\n","export const Config = {\n  socket: {\n    uri: '127.0.0.1:3001',\n  },\n  webrtc: {\n    config: {iceServers: [{urls: 'stun:stun.l.google.com:19302'}]},\n  },\n};\n","import {AnswerContext} from './structs/webrtc/AnswerContext';\nimport {Config} from '../../Config';\n\nexport class WebRtcController {\n  constructor() {\n    if (!!WebRtcController.instance) {\n      return WebRtcController.instance;\n    } else {\n      this._init();\n      WebRtcController.instance = this;\n    }\n  }\n\n  _init() {\n    this.rtc = new RTCPeerConnection(Config.webrtc.config);\n    this.remoteStream = new MediaStream();\n    this.localStream = new MediaStream();\n    // TODO For many connections this.RtcConnections = new Map();\n  }\n\n  async _getLocalStream() {\n    return await navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true,\n    });\n  }\n\n  async onAnswer(answerContext, sendIceCandidate) {\n    await this.rtc.setRemoteDescription(\n      new RTCSessionDescription(answerContext.answer)\n    );\n    this._setIceListener(sendIceCandidate);\n  }\n\n  async onOffer(offerContext, sendIceCandidate, sendAnswer) {\n    this.rtc.addEventListener('track', async (event) => {\n      this.remoteStream.addTrack(event.track);\n    });\n    await this.rtc.setRemoteDescription(\n      new RTCSessionDescription(offerContext.offer)\n    );\n    const answer = await this.rtc.createAnswer();\n    await this.rtc.setLocalDescription(answer);\n    sendAnswer(new AnswerContext(answer, offerContext.id));\n    this._setIceListener(sendIceCandidate);\n  }\n\n  async addIceCandidate(iceCandidateContext) {\n    try {\n      await this.rtc.addIceCandidate(iceCandidateContext.iceCandidate);\n    } catch (e) {\n      console.log('Error adding received ice candidate');\n    }\n  }\n\n  async sendOffer(sendOffer) {\n    this.localStream = await this._getLocalStream();\n    this.localStream.getTracks().forEach(async (track) => {\n      this.rtc.addTrack(track, this.localStream);\n    });\n    const offer = await this.rtc.createOffer();\n    await this.rtc.setLocalDescription(offer);\n    sendOffer(offer);\n  }\n\n  _setIceListener(sendIceCandidate) {\n    this.rtc.addEventListener('icecandidate', (event) => {\n      if (event.candidate) {\n        sendIceCandidate(event.candidate);\n      }\n    });\n  }\n}\n","import React, {memo, useEffect, useRef, useState} from 'react';\nimport styled from 'styled-components';\nimport {useSocketContext} from '../../logic/websocket/context/useSocketContext';\nimport {IceCandidateContext} from '../../logic/web-rtc/structs/webrtc/IceCandidateContext';\nimport {WebRtcController} from '../../logic/web-rtc/WebRtcController';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst Video = styled.video`\n  display: inline-block;\n  max-width: 100%;\n  max-height: 100%;\n`;\n\n/**\n * Block with video content\n * @return {JSX.Element}\n * @constructor\n */\nconst VideoBox = () => {\n  const videoRef = useRef(null);\n  const context = useSocketContext();\n  const [rtcController, setRtcController] = useState(null);\n\n  useEffect(() => {\n    const controller = new WebRtcController();\n    setRtcController(controller);\n    videoRef.current.srcObject = controller.remoteStream;\n  }, []);\n\n  useEffect(() => {\n    if (context.answerContext) {\n      rtcController.onAnswer(context.answerContext, (iceCandidate) =>\n        context.sendIceCandidateOffer(iceCandidate)\n      );\n    }\n  }, [context.answerContext]);\n\n  useEffect(() => {\n    if (context.offerContext) {\n      rtcController.onOffer(\n        context.offerContext,\n        (iceCandidate) =>\n          context.sendIceCandidateAnswer(\n            new IceCandidateContext(iceCandidate, context.offerContext.id)\n          ),\n        (answerContext) => context.sendAnswer(answerContext)\n      );\n    }\n  }, [context.offerContext]);\n\n  useEffect(() => {\n    if (context.iceCandidateAnswer) {\n      rtcController.addIceCandidate(context.iceCandidateAnswer);\n    }\n  }, [context.iceCandidateAnswer]);\n\n  useEffect(() => {\n    if (context.iceCandidateOffer) {\n      rtcController.addIceCandidate(context.iceCandidateOffer);\n    }\n  }, [context.iceCandidateOffer]);\n\n  const startTranslation = () => {\n    if (context.users.length === 2) {\n      rtcController.sendOffer((offer) => context.sendOffer(offer));\n    } else {\n      alert('Video translation available for 2 users in room only');\n    }\n  };\n\n  return (\n    <Card>\n      <CardMedia>\n        <Button onClick={startTranslation}>translate video</Button>\n      </CardMedia>\n      <CardContent>\n        <Video\n          ref={videoRef}\n          title=\"Local webcam video\"\n          autoPlay={true}\n          playsinlines\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default memo(VideoBox);\n","import React, {memo} from 'react';\nimport MessageWindow from './MessagesWindow';\nimport MessageBoxInput from './MessageBoxInput';\nimport {Grid} from '@material-ui/core';\nimport LiveUserWindow from './LiveUserWindow';\nimport styled from 'styled-components';\nimport VideoBox from './VideoBox';\n\nconst StyledGrid = styled(Grid)`\n  min-height: 200px;\n  text-align: center;\n`;\n\n/**\n * Window with all chat components\n * @return {JSX.Element}\n * @constructor\n */\nconst ChatPage = () => {\n  return (\n    <Grid container spacing={3}>\n      <StyledGrid item xs={12} />\n      <Grid item xs={3}>\n        <VideoBox />\n      </Grid>\n      <Grid item xs={6}>\n        <MessageWindow />\n        <MessageBoxInput />\n      </Grid>\n      <Grid item xs={3}>\n        <LiveUserWindow />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default memo(ChatPage);\n","import React, {useEffect} from 'react';\nimport {Container} from '@material-ui/core';\nimport WelcomePage from './welcome-page/WelcomePage';\nimport {StylesProvider} from '@material-ui/styles';\nimport ChatPage from './chat-page/ChatPage';\nimport {useHistory} from 'react-router-dom';\nimport {useSocketContext} from '../logic/websocket/context/useSocketContext';\nimport styled from 'styled-components';\n\nconst StyledContainer = styled(Container)`\n  min-height: 100vh;\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;\n\nconst StyledContainerModal = styled(StyledContainer)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n/**\n * Root of application components\n * @return {JSX.Element}\n * @constructor\n */\nconst App = () => {\n  const history = useHistory();\n  const socketContext = useSocketContext();\n\n  useEffect(() => {\n    if (socketContext.isChatEntered === true) {\n      history.push(`/${socketContext.room.name}`);\n    }\n  }, [history, socketContext.isChatEntered, socketContext.room]);\n\n  return (\n    <StylesProvider injectFirst>\n      {!socketContext.isChatEntered ? (\n        <StyledContainerModal>\n          <WelcomePage />\n        </StyledContainerModal>\n      ) : (\n        <StyledContainer>\n          <ChatPage />\n        </StyledContainer>\n      )}\n    </StylesProvider>\n  );\n};\n\nexport default App;\n","/**\n * The list of all supported websocket events\n * @see SocketController\n */\nexport const SocketEvents = {\n  ON: {\n    CONNECT: 'connect',\n    DISCONNECT: 'disconnect',\n    SUCCESS_ROOM_ENTER: 'successEnter',\n    ROOM_USERS: 'liveRoomUsers',\n    MESSAGE: 'broadcastChatMessage',\n  },\n  EMIT: {\n    ENTER_ROOM: 'enterRoom',\n    SEND_MESSAGE: 'sendChatMessage',\n  },\n  WEB_RTC: {\n    ON: {\n      ANSWER: 'getAnswer',\n      OFFER: 'getOffer',\n      ICE_CANDIDATE_OFFER: 'getIceCandidateOffer',\n      ICE_CANDIDATE_ANSWER: 'getIceCandidateAnswer',\n    },\n    EMIT: {\n      SEND_OFFER: 'sendOffer',\n      SEND_ANSWER: 'sendAnswer',\n      SEND_ICE_CANDIDATE_OFFER: 'sendIceCandidateOffer',\n      SEND_ICE_CANDIDATE_ANSWER: 'sendIceCandidateAnswer',\n    },\n  },\n};\n","/**\n * Room information\n */\nexport class Room {\n  /**\n   * @constructor\n   * @param {string} name Name of the room\n   */\n  constructor(name) {\n    this.name = name;\n  }\n}\n","/**\n * User information\n */\nexport class User {\n  /**\n   * @constructor\n   * @param {string} name Name of the user\n   */\n  constructor(name) {\n    this.name = name;\n  }\n}\n","import io from 'socket.io-client';\nimport {SocketEvents} from './SocketEvents';\nimport {Room} from './structs/incoming/Room';\nimport {User} from './structs/incoming/User';\n\n/**\n * Controller of the chat websocket\n */\nexport class SocketController {\n  /**\n   * @constructor\n   * @param {string} uri URL:port of the websocket\n   */\n  constructor(uri) {\n    this._socket = io(uri);\n  }\n\n  /**\n   * @return {string} Id of the websocket partial\n   */\n  get id() {\n    return this._socket.id;\n  }\n\n  /**\n   * Do anything on call\n   * @callback callback\n   */\n\n  /**\n   * @param {callback} callback Calls when websocket connect\n   */\n  onConnect(callback) {\n    this._socket.on(SocketEvents.ON.CONNECT, () => {\n      console.log('Socket connected');\n      console.dir(this._socket);\n      callback();\n    });\n  }\n\n  /**\n   * @param {callback} callback Calls when websocket disconnect\n   */\n  onDisconnect(callback) {\n    this._socket.on(SocketEvents.ON.DISCONNECT, () => {\n      console.log('Socket disconnected');\n      callback();\n    });\n  }\n\n  /**\n   * @callback onChatEnterCallback\n   * @param {Room} The room info\n   */\n\n  /**\n   * @param {onChatEnterCallback} callback Calls when current user successfully enter to the room\n   */\n  onChatEnter(callback) {\n    this._socket.on(SocketEvents.ON.SUCCESS_ROOM_ENTER, (room) => {\n      console.log('Room entered');\n      console.dir(room);\n      callback(new Room(room));\n    });\n  }\n\n  /**\n   * @callback onRoomUsersCallback\n   * @param {User[]} users The list of users\n   */\n\n  /**\n   * @param {onRoomUsersCallback} callback Calls when someone enters or leaves the room\n   */\n  onRoomUsers(callback) {\n    this._socket.on(SocketEvents.ON.ROOM_USERS, (users) => {\n      console.log('List of room users changed');\n      console.dir(users);\n      const newUsers = users.map((value) => new User(value));\n      callback(newUsers);\n    });\n  }\n\n  /**\n   * @callback onUserMessageCallback\n   * @param {IncomingMessage} message\n   */\n\n  /**\n   * @param {onUserMessageCallback} callback Calls when a new message arrives\n   */\n  onMessage(callback) {\n    this._socket.on(SocketEvents.ON.MESSAGE, (message) => {\n      console.log('New message arrived');\n      console.dir(message);\n      callback(message);\n    });\n  }\n\n  /**\n   * Connect to room of the chat\n   * @param {RoomConnection} roomConnection Arguments needed to enter the room of the chat\n   */\n  enterRoom(roomConnection) {\n    console.log('Connecting to room');\n    console.dir(roomConnection);\n    this._socket.emit(SocketEvents.EMIT.ENTER_ROOM, {\n      name: roomConnection.username,\n      room: roomConnection.room,\n    });\n  }\n\n  /**\n   * Send message to all users in the same room\n   * @param {OutgoingMessage} message\n   */\n  sendMessage(message) {\n    console.log('Sending message');\n    console.dir(message);\n    this._socket.emit(SocketEvents.EMIT.SEND_MESSAGE, message);\n  }\n\n  /**\n   * @callback onOfferCallback\n   * @param {OfferContext} offer\n   */\n\n  /**\n   * @param {onOfferCallback} callback Calls when WebRtc offer arrives\n   */\n  onOffer(callback) {\n    this._socket.on(SocketEvents.WEB_RTC.ON.OFFER, (offerContext) => {\n      console.log('Got WebRtc offer');\n      console.dir(offerContext);\n      callback(offerContext);\n    });\n  }\n\n  /**\n   * @callback onAnswerCallback\n   * @param {AnswerContext} offer\n   */\n\n  /**\n   * @param {onAnswerCallback} callback Calls when WebRtc answer arrives\n   */\n  onAnswer(callback) {\n    this._socket.on(SocketEvents.WEB_RTC.ON.ANSWER, (answerContext) => {\n      console.log('Got WebRtc answer');\n      console.dir(answerContext);\n      callback(answerContext);\n    });\n  }\n\n  /**\n   * @callback onIceCandidateOfferCallback\n   * @param {IceCandidateContext} iceCandidate\n   */\n\n  /**\n   * @param {onIceCandidateOfferCallback} callback Calls when iceCandidate arrives from offer\n   */\n  onIceCandidateOffer(callback) {\n    this._socket.on(\n      SocketEvents.WEB_RTC.ON.ICE_CANDIDATE_OFFER,\n      (iceCandidate) => {\n        console.log('Got WebRtc iceCandidate from offer');\n        console.dir(iceCandidate);\n        callback(iceCandidate);\n      }\n    );\n  }\n\n  /**\n   * @callback onIceCandidateAnswerCallback\n   * @param {IceCandidateContext} iceCandidate\n   */\n\n  /**\n   * @param {onIceCandidateAnswerCallback} callback Calls when iceCandidate arrives from answer\n   */\n  onIceCandidateAnswer(callback) {\n    this._socket.on(\n      SocketEvents.WEB_RTC.ON.ICE_CANDIDATE_ANSWER,\n      (iceCandidate) => {\n        console.log('Got WebRtc iceCandidate from answer');\n        console.dir(iceCandidate);\n        callback(iceCandidate);\n      }\n    );\n  }\n\n  /**\n   * Send WebRtc offer to all users in room\n   * @param {RTCSessionDescription} offer\n   */\n  sendOffer(offer) {\n    console.log('Sending WebRtc offer');\n    console.dir(offer);\n    this._socket.emit(SocketEvents.WEB_RTC.EMIT.SEND_OFFER, offer);\n  }\n\n  /**\n   * Send WebRtc answer to the specified socket id\n   * @param {AnswerContext} answer Answer SDP with socket id of offer\n   */\n  sendAnswer(answer) {\n    console.log('Sending WebRtc answer');\n    console.dir(answer);\n    this._socket.emit(SocketEvents.WEB_RTC.EMIT.SEND_ANSWER, answer);\n  }\n\n  /**\n   * Send WebRtc ICE candidate from offer to all users in room\n   * @param {RTCIceCandidate} iceCandidate\n   */\n  sendIceCandidateOffer(iceCandidate) {\n    console.log('Sending WebRtc ICE candidate from offer');\n    console.dir(iceCandidate);\n    this._socket.emit(\n      SocketEvents.WEB_RTC.EMIT.SEND_ICE_CANDIDATE_OFFER,\n      iceCandidate\n    );\n  }\n\n  /**\n   * Send WebRtc ICE candidate from answer to the specified socket id\n   * @param {IceCandidateContext} iceCandidate\n   */\n  sendIceCandidateAnswer(iceCandidate) {\n    console.log('Sending WebRtc ICE candidate from answer');\n    console.dir(iceCandidate);\n    this._socket.emit(\n      SocketEvents.WEB_RTC.EMIT.SEND_ICE_CANDIDATE_ANSWER,\n      iceCandidate\n    );\n  }\n}\n","const ContextState = {\n  id: null,\n  isChatEntered: false,\n  isConnected: false,\n  message: null,\n  room: null,\n  users: null,\n  emits: {\n    enterRoom: null,\n    sendMessage: null,\n  },\n  webrtc: {\n    offerContext: null,\n    answerContext: null,\n    iceCandidateOffer: null,\n    iceCandidateAnswer: null,\n    emits: {\n      sendOffer: null,\n      sendAnswer: null,\n      sendIceCandidateOffer: null,\n      sendIceCandidateAnswer: null,\n    },\n  },\n};\n\nconst ACTION_TYPE = {\n  SET_ID: 0,\n  CONNECT: 1,\n  DISCONNECT: 2,\n  CHAT_LEAVE: 3,\n  SET_MESSAGE: 4,\n  SET_ROOM: 5,\n  SET_USERS: 6,\n  SET_EMITS_ENTER_ROOM: 7,\n  SET_EMITS_SEND_MESSAGE: 8,\n  SET_OFFER_CONTEXT: 9,\n  SET_ANSWER_CONTEXT: 10,\n  SET_ICE_CANDIDATE_OFFER: 11,\n  SET_ICE_CANDIDATE_ANSWER: 12,\n  SET_EMIT_SEND_OFFER: 13,\n  SET_EMIT_SEND_ANSWER: 14,\n  SET_EMIT_SEND_ICE_CANDIDATE_OFFER: 15,\n  SET_EMIT_SEND_ICE_CANDIDATE_ANSWER: 16,\n};\n\n// eslint-disable-next-line require-jsdoc\nfunction reducer(context, action) {\n  switch (action.type) {\n    case ACTION_TYPE.SET_ID:\n      return {...context, id: action.id};\n    case ACTION_TYPE.CONNECT:\n      return {...context, isConnected: true};\n    case ACTION_TYPE.DISCONNECT:\n      return {...context, isChatEntered: false, isConnected: false};\n    case ACTION_TYPE.CHAT_LEAVE:\n      return {...context, isChatEntered: false};\n    case ACTION_TYPE.SET_MESSAGE:\n      return {...context, message: action.message};\n    case ACTION_TYPE.SET_ROOM:\n      return {...context, room: action.room, isChatEntered: true};\n    case ACTION_TYPE.SET_USERS:\n      return {...context, users: action.users};\n    case ACTION_TYPE.SET_EMITS_ENTER_ROOM:\n      return {\n        ...context,\n        emits: {...context.emits, enterRoom: action.enterRoom},\n      };\n    case ACTION_TYPE.SET_EMITS_SEND_MESSAGE:\n      return {\n        ...context,\n        emits: {...context.emits, sendMessage: action.sendMessage},\n      };\n    case ACTION_TYPE.SET_OFFER_CONTEXT:\n      return {\n        ...context,\n        webrtc: {...context.webrtc, offerContext: action.offerContext},\n      };\n    case ACTION_TYPE.SET_ANSWER_CONTEXT:\n      return {\n        ...context,\n        webrtc: {...context.webrtc, answerContext: action.answerContext},\n      };\n    case ACTION_TYPE.SET_ICE_CANDIDATE_OFFER:\n      return {\n        ...context,\n        webrtc: {\n          ...context.webrtc,\n          iceCandidateOffer: action.iceCandidateOffer,\n        },\n      };\n    case ACTION_TYPE.SET_ICE_CANDIDATE_ANSWER:\n      return {\n        ...context,\n        webrtc: {\n          ...context.webrtc,\n          iceCandidateAnswer: action.iceCandidateAnswer,\n        },\n      };\n    case ACTION_TYPE.SET_EMIT_SEND_OFFER:\n      return {\n        ...context,\n        webrtc: {\n          ...context.webrtc,\n          emits: {\n            ...context.webrtc.emits,\n            sendOffer: action.sendOffer,\n          },\n        },\n      };\n    case ACTION_TYPE.SET_EMIT_SEND_ANSWER:\n      return {\n        ...context,\n        webrtc: {\n          ...context.webrtc,\n          emits: {\n            ...context.webrtc.emits,\n            sendAnswer: action.sendAnswer,\n          },\n        },\n      };\n    case ACTION_TYPE.SET_EMIT_SEND_ICE_CANDIDATE_OFFER:\n      return {\n        ...context,\n        webrtc: {\n          ...context.webrtc,\n          emits: {\n            ...context.webrtc.emits,\n            sendIceCandidateOffer: action.sendIceCandidateOffer,\n          },\n        },\n      };\n    case ACTION_TYPE.SET_EMIT_SEND_ICE_CANDIDATE_ANSWER:\n      return {\n        ...context,\n        webrtc: {\n          ...context.webrtc,\n          emits: {\n            ...context.webrtc.emits,\n            sendIceCandidateAnswer: action.sendIceCandidateAnswer,\n          },\n        },\n      };\n    default:\n      return context;\n  }\n}\n\nexport {ContextState, reducer, ACTION_TYPE};\n","import React, {useReducer, useEffect} from 'react';\nimport {Config} from '../Config';\nimport {SocketContext} from '../logic/websocket/context/SocketContext';\nimport {SocketController} from '../logic/websocket/SocketController';\nimport {\n  ContextState,\n  ACTION_TYPE,\n  reducer,\n} from '../logic/websocket/context/ContextState';\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Link websocket context with websocket controller\n * @see ContextState\n * @see SocketController\n * @return {JSX.Element}\n * @constructor\n */\nexport const SocketManager = (props) => {\n  const [context, dispatchContext] = useReducer(reducer, ContextState);\n\n  useEffect(() => {\n    const socket = new SocketController(Config.socket.uri);\n    socket.onConnect(() => {\n      dispatchContext({type: ACTION_TYPE.SET_ID, id: socket.id});\n      dispatchContext({type: ACTION_TYPE.CONNECT});\n    });\n    socket.onDisconnect(() => {\n      dispatchContext({type: ACTION_TYPE.DISCONNECT});\n    });\n    socket.onChatEnter((room) => {\n      dispatchContext({type: ACTION_TYPE.SET_ROOM, room: room});\n    });\n    socket.onRoomUsers((users) => {\n      dispatchContext({type: ACTION_TYPE.SET_USERS, users: users});\n    });\n    socket.onMessage((message) => {\n      dispatchContext({type: ACTION_TYPE.SET_MESSAGE, message: message});\n    });\n    socket.onOffer((offerContext) => {\n      dispatchContext({\n        type: ACTION_TYPE.SET_OFFER_CONTEXT,\n        offerContext: offerContext,\n      });\n    });\n    socket.onAnswer((answerContext) => {\n      dispatchContext({\n        type: ACTION_TYPE.SET_ANSWER_CONTEXT,\n        answerContext: answerContext,\n      });\n    });\n    socket.onIceCandidateOffer((iceCandidateContext) => {\n      dispatchContext({\n        type: ACTION_TYPE.SET_ICE_CANDIDATE_OFFER,\n        iceCandidateOffer: iceCandidateContext,\n      });\n    });\n    socket.onIceCandidateAnswer((iceCandidateContext) => {\n      dispatchContext({\n        type: ACTION_TYPE.SET_ICE_CANDIDATE_ANSWER,\n        iceCandidateAnswer: iceCandidateContext,\n      });\n    });\n\n    dispatchContext({\n      type: ACTION_TYPE.SET_EMITS_ENTER_ROOM,\n      enterRoom: (roomConnection) => socket.enterRoom(roomConnection),\n    });\n    dispatchContext({\n      type: ACTION_TYPE.SET_EMITS_SEND_MESSAGE,\n      sendMessage: (message) => socket.sendMessage(message),\n    });\n    dispatchContext({\n      type: ACTION_TYPE.SET_EMIT_SEND_OFFER,\n      sendOffer: (offer) => socket.sendOffer(offer),\n    });\n    dispatchContext({\n      type: ACTION_TYPE.SET_EMIT_SEND_ANSWER,\n      sendAnswer: (answerContext) => socket.sendAnswer(answerContext),\n    });\n    dispatchContext({\n      type: ACTION_TYPE.SET_EMIT_SEND_ICE_CANDIDATE_OFFER,\n      sendIceCandidateOffer: (iceCandidate) =>\n        socket.sendIceCandidateOffer(iceCandidate),\n    });\n    dispatchContext({\n      type: ACTION_TYPE.SET_EMIT_SEND_ICE_CANDIDATE_ANSWER,\n      sendIceCandidateAnswer: (iceCandidateContext) =>\n        socket.sendIceCandidateAnswer(iceCandidateContext),\n    });\n  }, []);\n\n  return (\n    <SocketContext.Provider value={context}>\n      {props.children}\n    </SocketContext.Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport {BrowserRouter} from 'react-router-dom';\nimport {SocketManager} from './components/SocketManager';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <SocketManager>\n        <App />\n      </SocketManager>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}